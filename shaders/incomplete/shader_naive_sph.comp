#version 450

struct Particle {
	vec2 position;
	vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    //index of the specific particle we are evaluating
    uint index = gl_GlobalInvocationID.x;

    Particle particleIn = particlesIn[index];

    particlesOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].velocity = particleIn.velocity;

    // Ensure seamless border
    if (particlesOut[index].position.x <= -1.0) {
		particlesOut[index].position.x += 2.0;
	}

	if (particlesOut[index].position.x >= 1.0) {
        particlesOut[index].position.x -= 2.0;
    }

    // Flip velocity at 
    if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
        particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
    }

}


//W_ij = W(x_ij,h) = C_d * 1 / h^d * W(q)
//2 dimensions
// for 3 dim: C_d = C_3, where C_3 is recommended to be

//Cubic spline kernel
//W(q) = max((1-q)^3, 0.0) + max(4*(0.5-q)^3, 0.0)
float kernel(float Cd, float h, float q, float numDim) { //Note: Isotropic Kernel

    float W_q =  
        max(    pow((1.0-q), 3.0),      0.0)
        +
        max(    4.0*pow((0.5-q),3.0),   0.0);
    
    return W_q * Cd / pow(h, numDim);
}